/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 1000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("countValue0")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("countValue0[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue0";
}

SIGNAL("countValue0[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue0";
}

SIGNAL("countValue0[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue0";
}

SIGNAL("countValue0[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue0";
}

SIGNAL("countValue1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("countValue1[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue1";
}

SIGNAL("countValue1[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue1";
}

SIGNAL("countValue1[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue1";
}

SIGNAL("countValue1[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue1";
}

SIGNAL("countValue2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("countValue2[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue2";
}

SIGNAL("countValue2[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue2";
}

SIGNAL("countValue2[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue2";
}

SIGNAL("countValue2[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue2";
}

SIGNAL("countValue3")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("countValue3[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue3";
}

SIGNAL("countValue3[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue3";
}

SIGNAL("countValue3[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue3";
}

SIGNAL("countValue3[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "countValue3";
}

SIGNAL("data")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data";
}

SIGNAL("data[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data";
}

SIGNAL("data[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data";
}

SIGNAL("data[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data";
}

SIGNAL("requestDev0")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("requestDev1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("requestDev2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("requestDev3")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 200;
			LEVEL 0 FOR 2.5;
			LEVEL 1 FOR 2.5;
		}
	}
}

TRANSITION_LIST("countValue0[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("countValue0[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("countValue0[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("countValue0[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1000.0;
	}
}

TRANSITION_LIST("countValue1[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("countValue1[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("countValue1[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.027;
		LEVEL 1 FOR 113.238;
		LEVEL 0 FOR 286.209;
		LEVEL 1 FOR 79.797;
		LEVEL 0 FOR 440.729;
	}
}

TRANSITION_LIST("countValue1[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 80.027;
		LEVEL 0 FOR 113.238;
		LEVEL 1 FOR 286.209;
		LEVEL 0 FOR 79.797;
		LEVEL 1 FOR 440.729;
	}
}

TRANSITION_LIST("countValue2[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("countValue2[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("countValue2[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 562.499;
		LEVEL 0 FOR 76.338;
		LEVEL 1 FOR 361.163;
	}
}

TRANSITION_LIST("countValue2[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.258;
		LEVEL 1 FOR 113.007;
		LEVEL 0 FOR 369.234;
		LEVEL 1 FOR 76.338;
		LEVEL 0 FOR 361.163;
	}
}

TRANSITION_LIST("countValue3[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("countValue3[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.488;
		LEVEL 1 FOR 112.547;
		LEVEL 0 FOR 806.965;
	}
}

TRANSITION_LIST("countValue3[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 80.488;
		LEVEL 0 FOR 112.547;
		LEVEL 1 FOR 369.464;
		LEVEL 0 FOR 76.338;
		LEVEL 1 FOR 361.163;
	}
}

TRANSITION_LIST("countValue3[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 80.488;
		LEVEL 0 FOR 112.547;
		LEVEL 1 FOR 0.691;
		LEVEL 0 FOR 120.157;
		LEVEL 1 FOR 686.117;
	}
}

TRANSITION_LIST("data[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 2.5;
		LEVEL 0 FOR 15.0;
		LEVEL Z FOR 65.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL Z FOR 70.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 15.0;
			LEVEL Z FOR 65.0;
		}
		LEVEL 0 FOR 5.0;
		LEVEL Z FOR 75.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 15.0;
			LEVEL Z FOR 65.0;
		}
		LEVEL 0 FOR 15.0;
		LEVEL Z FOR 22.5;
	}
}

TRANSITION_LIST("data[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 2.5;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL Z FOR 65.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 15.0;
			LEVEL 1 FOR 5.0;
			LEVEL Z FOR 60.0;
		}
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL Z FOR 70.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 5.0;
			LEVEL Z FOR 65.0;
		}
		LEVEL 0 FOR 5.0;
		LEVEL Z FOR 75.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 5.0;
			LEVEL Z FOR 65.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 5.0;
		LEVEL Z FOR 22.5;
	}
}

TRANSITION_LIST("data[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 2.5;
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL Z FOR 65.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 5.0;
			LEVEL Z FOR 60.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL Z FOR 70.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 5.0;
			LEVEL Z FOR 65.0;
		}
		LEVEL 0 FOR 5.0;
		LEVEL Z FOR 75.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 5.0;
			LEVEL Z FOR 65.0;
		}
		LEVEL 0 FOR 5.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL Z FOR 22.5;
	}
}

TRANSITION_LIST("data[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 2.5;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL Z FOR 65.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 5.0;
				LEVEL 0 FOR 5.0;
			}
			LEVEL Z FOR 60.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		LEVEL Z FOR 70.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 5.0;
			LEVEL Z FOR 65.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 10.0;
		LEVEL Z FOR 65.0;
		LEVEL 1 FOR 5.0;
		LEVEL Z FOR 75.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 5.0;
			LEVEL Z FOR 65.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 5.0;
		LEVEL Z FOR 22.5;
	}
}

TRANSITION_LIST("requestDev0")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2.5;
		NODE
		{
			REPEAT = 12;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 75.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 32.5;
	}
}

TRANSITION_LIST("requestDev1")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 75.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 70.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 75.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 70.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 75.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 32.5;
	}
}

TRANSITION_LIST("requestDev2")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 75.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 70.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 75.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 70.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 75.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 27.5;
	}
}

TRANSITION_LIST("requestDev3")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 12.5;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 75.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 65.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 75.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 65.0;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 85.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 75.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 22.5;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "countValue0";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3, 4, 5;
}

DISPLAY_LINE
{
	CHANNEL = "countValue0[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "countValue0[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "countValue0[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "countValue0[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "countValue1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 6;
	TREE_LEVEL = 0;
	CHILDREN = 7, 8, 9, 10;
}

DISPLAY_LINE
{
	CHANNEL = "countValue1[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "countValue1[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "countValue1[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "countValue1[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "countValue2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
	CHILDREN = 12, 13, 14, 15;
}

DISPLAY_LINE
{
	CHANNEL = "countValue2[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "countValue2[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "countValue2[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "countValue2[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "countValue3";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 16;
	TREE_LEVEL = 0;
	CHILDREN = 17, 18, 19, 20;
}

DISPLAY_LINE
{
	CHANNEL = "countValue3[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "countValue3[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "countValue3[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "countValue3[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "data";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 21;
	TREE_LEVEL = 0;
	CHILDREN = 22, 23, 24, 25;
}

DISPLAY_LINE
{
	CHANNEL = "data[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "data[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "data[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "data[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "requestDev0";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 26;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "requestDev1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 27;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "requestDev2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 28;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "requestDev3";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 29;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 87500;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 87500;
	MASTER = TRUE;
}
;
